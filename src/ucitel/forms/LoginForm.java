/*
 * LoginForm.java
 *
 * Created on 29. srpen 2008, 11:37
 */
package ucitel.forms;

import java.awt.Frame;
import org.jdesktop.application.Action;
import javax.swing.JFrame;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import java.net.URL;
import java.net.URLConnection;
import java.net.MalformedURLException;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Iterator;
import ucitel.ConnectionToDB;
import ucitel.ErrorHandler;
import ucitel.LoginInfo;
//import ucitel.Teacher;
import ucitel.Ucitel;
import ucitel.XML;

/**
 *
 * @author  strafeldap
 */
public class LoginForm extends javax.swing.JDialog {

    public static LoginForm uniqueInstance;
    int checkLoginAttempt;
    Frame parent;
    //private String MySQLBinPath;

    public void init() {
        XML ini = XML.getInstance();
        if (ini.isEmpty()) {
            passwordField.setEnabled(false);
            storePasswordCB.setEnabled(false);
            loginButton.setEnabled(false);
        } else {
            passwordField.setEnabled(true);
            storePasswordCB.setEnabled(true);
            loginButton.setEnabled(true);

            //loginField.setText(ini.getUser());
            /*passwordField.setText(ini.getPassword());

            if (ini.getPassword().isEmpty() == false) {
                storePasswordCB.setSelected(true);
            } else {
                storePasswordCB.setSelected(false);
            }*/
        }

        conNameComboBox.removeAllItems();
        ArrayList<String> conNames = XML.getInstance().getConNames();
        Iterator i = conNames.iterator();
        while (true == i.hasNext()) {
            conNameComboBox.addItem(i.next());
        }
        conNameComboBox.setSelectedItem(ini.getLastConnection());

    }

    public LoginForm(java.awt.Frame parent) {

        super(parent);
        this.parent = parent;
        initComponents();
        init();
        this.setModal(true);
        this.setTitle("Login");
        //conNameComboBox.setVisible(false);

        uniqueInstance = this;
    }

    private ArrayList<String> getURLS() {
        //String[] Strings = null;
        ArrayList<String> urls = null;
        try {
            URL adresy = new URL(LoginInfo.URL);
            URLConnection adresyConnection = adresy.openConnection();
            adresyConnection.connect();
            BufferedReader in = new BufferedReader(
                    new InputStreamReader(
                    adresy.openStream()));

            String inputLine;
            urls = new ArrayList<String>();

            while ((inputLine = in.readLine()) != null) {
                urls.add(inputLine);
                //adresy.

                //System.out.println(inputLine);
            }
            in.close();

        } catch (MalformedURLException e) {     // new URL() failed
            e.printStackTrace();
        } catch (IOException e) {               // openConnection() failed
            e.printStackTrace();
        }


        return urls;
    }

    public static LoginForm getInstance() {
        return uniqueInstance;
    }

    /*public String getHost(){
    return hostField.getText();
    }
    
    public String getPort(){
    return portField.getText();
    }
    
    public String getPath(){
    return mysqlPathField.getText();
    }*/
    private LoginForm() {
        super();
        initComponents();
        XML ini = XML.getInstance();
        //loginField.setText(ini.getUser());
        passwordField.setText(ini.getPassword());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        conNameComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        storePasswordCB = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        loginButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setName("Form"); // NOI18N
        setResizable(false);

        jPanel2.setName("jPanel2"); // NOI18N

        conNameComboBox.setName("conNameComboBox"); // NOI18N
        conNameComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                conNameComboBoxItemStateChanged(evt);
            }
        });
        conNameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conNameComboBoxActionPerformed(evt);
            }
        });
        conNameComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                conNameComboBoxKeyReleased(evt);
            }
        });

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(ucitel.Ucitel.class).getContext().getResourceMap(LoginForm.class);
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        passwordField.setText(resourceMap.getString("passwordField.text")); // NOI18N
        passwordField.setName("passwordField"); // NOI18N
        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(ucitel.Ucitel.class).getContext().getActionMap(LoginForm.class, this);
        storePasswordCB.setAction(actionMap.get("handlePassword")); // NOI18N
        storePasswordCB.setName("storePasswordCB"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(conNameComboBox, 0, 356, Short.MAX_VALUE)
                    .addComponent(passwordField, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                    .addComponent(storePasswordCB))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(conNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(storePasswordCB)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setName("jPanel3"); // NOI18N

        jButton3.setAction(actionMap.get("addUser")); // NOI18N
        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        loginButton.setAction(actionMap.get("login")); // NOI18N
        loginButton.setText(resourceMap.getString("loginButton.text")); // NOI18N
        loginButton.setName("loginButton"); // NOI18N
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        jButton1.setAction(actionMap.get("deleteUser")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        jButton4.setAction(actionMap.get("displayEditFrom")); // NOI18N
        jButton4.setText(resourceMap.getString("jButton4.text")); // NOI18N
        jButton4.setName("jButton4"); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(267, 267, 267)
                        .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(269, 269, 269)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_loginButtonActionPerformed

private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
    login();
}//GEN-LAST:event_passwordFieldActionPerformed

private void conNameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conNameComboBoxActionPerformed
    /*String cmd = evt.getActionCommand();
    if (!cmd.equalsIgnoreCase("comboBoxChanged")){*/
    /*   String con = (String) conNameComboBox.getSelectedItem();
    XML.getInstance().setLastConnection(con);    */
    //} 
}//GEN-LAST:event_conNameComboBoxActionPerformed

private void conNameComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_conNameComboBoxItemStateChanged
// TODO add your handling code here:
    String con = (String) conNameComboBox.getSelectedItem();
    //XML.getInstance().setLastConnection(con);

    passwordField.setText(XML.getInstance().getPassword(con));
}//GEN-LAST:event_conNameComboBoxItemStateChanged

private void conNameComboBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_conNameComboBoxKeyReleased
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        login();
    }
}//GEN-LAST:event_conNameComboBoxKeyReleased

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    dispose();
}//GEN-LAST:event_jButton2ActionPerformed

    boolean isDatabaseLocal() {
        boolean local;

        XML ini = XML.getInstance();
        if (((ini.getDBhost() == null)) || (ini.getDBhost().equalsIgnoreCase("localhost"))) {
            local = true;
        } else {
            local = false;
        }

        return local;
    }

    @Action
    public boolean login() {
        ErrorHandler.debug("LoginForm::loging() entered");
        char[] passwordChar = passwordField.getPassword();
        String password = new String(passwordChar);
        XML ini = XML.getInstance();
        ini.setLastConnection((String) conNameComboBox.getSelectedItem());
        int passwordHashEntered = password.hashCode();
        int hashCodeFromXML = Integer.parseInt(ini.getPasswordHash());
        GUI gui = GUI.getInstance();
        if (hashCodeFromXML == passwordHashEntered) {

            LoginInfo li = null;
            try {
                XML xml = XML.getInstance();
                li = new LoginInfo((String) conNameComboBox.getSelectedItem(), xml.getLogin(), password, xml.getDBhost(), "", xml.getMySQLPath(), isDatabaseLocal());
            } catch (Exception e) {
                ErrorHandler.logError(e);
            }
            ErrorHandler.debug("LoginForm::loging() calling gui.connectToDB");
            boolean dbconnected = gui.connectToDB(li);
            ErrorHandler.debug("LoginForm::loging() dbconnected returned " + dbconnected);
            try {
                ErrorHandler.debug("LoginForm::loging() calling checkLogin");
                boolean check = checkLogin(li);
                ErrorHandler.debug("LoginForm::loging() checkLogin returned");
                if (true == check) {
                    gui.setUserLogged(true);
                    gui.setDirection();
                    gui.loadThemes();

                    if (ini.getGrammar().matches("true")) {
                        gui.setGrammar(true);
                    } else {
                        gui.setGrammar(false);
                    }
                    ini.writeXML();
                    //if (dbconnected == true) {
                        //Teacher teacher = Teacher.getInstance();
                        //if (teacher.isQuestionAvailable()) {
                        //   teacher.getQuestionFromDB();
                        //}
                        this.dispose();
                    //}
                } else {
                    JOptionPane.showMessageDialog(gui.getComponent(), "Line: " + getLineNumber() + ": Please enter correct login data", "Login failed", JOptionPane.OK_OPTION);
                }
            } catch (Exception e) {
                ErrorHandler.logError(e);
            }


            gui.updateProgressBar();



        } else {
            if (this.isVisible()) {
                JOptionPane.showMessageDialog(GUI.getInstance().getComponent(), "Please enter correct password", "Invalid password", JOptionPane.OK_OPTION);
            } else {
                this.setLocationRelativeTo(parent);
                this.setVisible(true);
            }
        }

        return true;
    }

    public static int getLineNumber() {
        return Thread.currentThread().getStackTrace()[2].getLineNumber();
    }

    private boolean checkLogin(LoginInfo li) throws Exception {
        ErrorHandler.debug("LoginForm::checkLogin(): executed");

        //XML.getInstance().getPassword(li.getLogin());
        try {
            int userId = ConnectionToDB.getInstance().getUserID(li.getLogin());
            ErrorHandler.debug("LoginForm::checkLogin(): userId: " + userId);
            if (0 == userId) {
                ErrorHandler.debug("LoginForm::checkLogin(): returns false");
                return false;
            }

        } catch (Exception e) {
            ErrorHandler.debug("LoginForm: checkLogin(): exception caught: " + e.toString());
            try {
                System.out.println(e.toString());
                Thread.sleep(1000);
            } catch (Exception ex) {
                ErrorHandler.debug("LoginForm::checkLogin(): sleep failed");
            }
            //wait(1000);
            checkLoginAttempt++;
            if (checkLoginAttempt == 10000) {
                ErrorHandler.debug("LoginForm::checkLogin(): returns false after 10 attempts");
                throw new Exception("LoginForm: checkLogin(): login not successful");
            } else {
                ErrorHandler.debug("LoginForm::checkLogin(): next attempt: " + checkLoginAttempt);
                checkLogin(li);
            }


        }

        ErrorHandler.debug("LoginForm: checkLogin(): returns true");
        return true;
    }

    @Action
    public void addUser() {
        AddUserForm auf = new AddUserForm();
        auf.setVisible(true);
        init();
        //String user = XML.getInstance().getUser();
    }

    @Action
    public void handlePassword() {
        if (storePasswordCB.isSelected() == true) {
            XML.getInstance().modifyXML(XML.getInstance().getPasswordElementName(), new String(passwordField.getPassword()));
        } else {
            XML.getInstance().modifyXML(XML.getInstance().getPasswordElementName(), "");
        }
    }

    @Action
    public void deleteUser() {
        String user = XML.getInstance().getLogin();
        String host = XML.getInstance().getDBhost();
        String port = XML.getInstance().getDBport();

        int answer = JOptionPane.showConfirmDialog(this, "Smazat i uzivatele a slovicka z databaze?", "", JOptionPane.YES_NO_CANCEL_OPTION);
        try {
            if (JOptionPane.YES_OPTION == answer) {
                ConnectionToDB.getInstance(new LoginInfo(host, port)).deleteUser(user);
                XML.getInstance().deleteConnection((String) conNameComboBox.getSelectedItem());
            } else if (JOptionPane.NO_OPTION == answer) {
                XML.getInstance().deleteConnection((String) conNameComboBox.getSelectedItem());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        init();
    }

    @Action
    public void displayEditFrom() {
        JFrame mainFrame = Ucitel.getApplication().getMainFrame();
        String profileName = (String) conNameComboBox.getSelectedItem();
        EditProfile EP = new EditProfile(mainFrame, true, profileName);

        EP.setLocationRelativeTo(mainFrame);

        EP.setVisible(true);

        conNameComboBox.removeAllItems();
        ArrayList<String> conNames = XML.getInstance().getConNames();
        Iterator i = conNames.iterator();
        while (true == i.hasNext()) {
            conNameComboBox.addItem(i.next());
        }

        XML ini = XML.getInstance();
        conNameComboBox.setSelectedItem(ini.getLastConnection());
        ini.writeXML();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox conNameComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton loginButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JCheckBox storePasswordCB;
    // End of variables declaration//GEN-END:variables
}
